import { Request, Response } from 'express';
import { google } from 'googleapis';

const REDIRECT_URI = 'http://localhost:4000/api/calendar/oauth2callback';

// ✅ Step 1: Redirect to Google's OAuth consent screen
export const startOAuth = (req: Request, res: Response): void => {
  const oauth2Client = new google.auth.OAuth2(
    process.env.GOOGLE_CLIENT_ID,
    process.env.GOOGLE_CLIENT_SECRET,
    REDIRECT_URI
  );

  const url = oauth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: ['https://www.googleapis.com/auth/calendar.events'],
    prompt: 'consent',
  });

  res.redirect(url);
};

// ✅ Step 2: Handle OAuth redirect and token exchange
export const handleOAuthCallback = async (req: Request, res: Response): Promise<void> => {
  const code = req.query.code as string;

  const oauth2Client = new google.auth.OAuth2(
    process.env.GOOGLE_CLIENT_ID,
    process.env.GOOGLE_CLIENT_SECRET,
    REDIRECT_URI
  );

  try {
    const { tokens } = await oauth2Client.getToken(code);
    oauth2Client.setCredentials(tokens);

    res.json({ message: 'Authentication successful!', tokens });
  } catch (err) {
    console.error('OAuth Callback Error:', err);
    res.status(500).json({ error: 'OAuth callback failed', details: err });
  }
};

// ✅ Step 3: Create Google Calendar event using token
export const syncCalendar = async (req: Request, res: Response): Promise<void> => {
  const { access_token, eventDetails } = req.body;

  if (!access_token || !eventDetails) {
    res.status(400).json({ error: 'Missing access token or event details' });
    return;
  }

  try {
    const oauth2Client = new google.auth.OAuth2();
    oauth2Client.setCredentials({ access_token });

    const calendar = google.calendar({ version: 'v3', auth: oauth2Client });

    const event = await calendar.events.insert({
      calendarId: 'primary',
      requestBody: {
        summary: eventDetails.summary || 'AI Study Session',
        description: eventDetails.description || 'Generated by AI Mentor Bot',
        start: {
          dateTime: eventDetails.start,
          timeZone: 'America/New_York',
        },
        end: {
          dateTime: eventDetails.end,
          timeZone: 'America/New_York',
        },
      },
    });

    res.status(200).json({ message: 'Event created!', event: event.data });
  } catch (error) {
    console.error('❌ Error creating event:', error);
    res.status(500).json({ error: 'Failed to create event', details: error });
  }
};
